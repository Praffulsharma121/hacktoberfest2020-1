#include<stdio.h>
#include<stdlib.h>
#define bool int

struct Node
{
 	char data;
	struct Node* next;
};

void Push(struct Node** top_ref, int NewData);

int Pop(struct Node** top_ref);

bool isMatchingPair(char C1, char C2)
{
	if(C1 == '(' && C2 == ')')
		return 1;
	else if(C1 == '{' && C2 == '}')
		return 1;
	else if(C1 == '[' && C2 == ']')
		return 1;
	else
		return 0;
}

bool areParanthesisBalanced(char exp[])
{
	int i = 0;
	struct Node* stack = NULL;
	while(exp[i]){
		if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
			Push(&stack, exp[i]);
		if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
		{
			if(stack == NULL)
				return 0;
			else if(!isMatchingPair(Pop(&stack), exp[i]))
				return 0;
		}
		i++;
	}
	if(stack == NULL)
		return 1;
	else
		return 0;
}

int main()
{
	char exp[51] = "{()}[]";
	if(areParanthesisBalanced (exp))
		printf("Balanced\n");
	else
		printf("Not Balanced\n");
	return 0;
}

void Push(struct Node** top_ref, int NewData)
{
	struct Node* temp = (struct Node*) malloc(sizeof(struct Node));
	if(temp == NULL){
		printf("Stack Overflow.\n");
		getchar();
		exit(0);
	}
	temp->data = NewData;
	temp->next = *top_ref;
	*top_ref = temp;
}

int Pop(struct Node** top_ref)
{
	struct Node* top;
	char res;
	if(*top_ref == NULL){
		printf("Stack Overflow.\n");
		getchar();
		exit(0);
	}
	else{
		top = *top_ref;
		res = top->data;
		*top_ref = top->next;
		free(top);
		return res;
	}
}
